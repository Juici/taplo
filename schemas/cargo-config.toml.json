{
    "$schema": "https://json-schema.org/draft-07/schema",
    "title": ".cargo/config.toml",
    "description": "A schema for Cargo configuration files",
    "x-taplo-info": {
        "patterns": ["^((.*(/|\\\\))?\\.cargo(/|\\\\)config(\\.toml)?)$"]
    },
    "type": "object",
    "properties": {
        "paths": {
            "title": "Path dependency overrides",
            "description": "An array of paths to local packages which are to be used as overrides for dependencies. For more information see the [Overriding Dependencies guide](https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#paths-overrides).",
            "type": "array",
            "items": {
                "type": "string"
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#paths"
                }
            }
        },
        "alias": {
            "title": "Command aliases",
            "description": "The `[alias]` table defines CLI command aliases. For example, running `cargo b` is an alias for running `cargo build`. Each key in the table is the subcommand, and the value is the actual command to run. The value may be an array of strings, where the first element is the command and the following are arguments. It may also be a string, which will be split on spaces into subcommand and arguments. The following aliases are built-in to Cargo:\n\n```toml\n[alias]\nb = \"build\"\nc = \"check\"\nd = \"doc\"\nt = \"test\"\nr = \"run\"\n```\nAliases are not allowed to redefine existing built-in commands.",
            "type": "object",
            "additionalProperties": {
                "type": ["string", "array"],
                "items": {
                    "type": "string"
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#alias"
                }
            }
        },
        "build": {
            "title": "Compiler settings",
            "description": "The `[build]` table controls build-time operations and compiler settings.",
            "type": "object",
            "properties": {
                "jobs": {
                    "title": "Number of parallel jobs",
                    "description": "Sets the maximum number of compiler processes to run in parallel.\n\nCan be overridden with the `--jobs` CLI option.",
                    "type": "integer"
                },
                "rustc": {
                    "title": "Compiler tool",
                    "description": "Sets the executable to use for `rustc`.",
                    "type": "string",
                    "default": "rustc"
                },
                "rustc-wrapper": {
                    "title": "Compiler wrapper",
                    "description": "Sets a wrapper to execute instead of `rustc`. The first argument passed to the wrapper is the path to the actual `rustc`.",
                    "type": "string"
                },
                "rustc-workspace-wrapper": {
                    "title": "Compiler workspace wrapper",
                    "description": "Sets a wrapper to execute instead of `rustc`, for workspace members only. The first argument passed to the wrapper is the path to the actual `rustc`. It affects the filename hash so that artifacts produced by the wrapper are cached separately.",
                    "type": "string"
                },
                "rustdoc": {
                    "title": "Doc generator",
                    "description": "Sets the executable to use for `rustdoc`.",
                    "type": "string",
                    "default": "rustdoc"
                },
                "target": {
                    "title": "Target platform",
                    "description": "The default target platform triple to compile to.\n\nThis may also be a relative path to a `.json` target spec file.\n\nCan be overridden with the `--target` CLI option.",
                    "type": "string"
                },
                "target-dir": {
                    "title": "Generated artifact path",
                    "description": "The path to where all compiler output is placed. The default if not specified is a directory named `target` located at the root of the workspace.\n\nCan be overridden with the `--target-dir` CLI option.",
                    "type": "string",
                    "default": "target"
                },
                "rustflags": {
                    "title": "Compiler flags",
                    "description": "Extra command-line flags to pass to `rustc`. The value may be a array of strings or a space-separated string.\n\nThere are three mutually exclusive sources of extra flags. They are checked in order, with the first one being used:\n\n1. `RUSTFLAGS` environment variable.\n2. All matching `target.<triple>.rustflags` and `target.<cfg>.rustflags` config entries joined together.\n3. `build.rustflags` config value.\n\nAdditional flags may also be passed with the [`cargo rustc`](https://doc.rust-lang.org/cargo/commands/cargo-rustc.html) command.\n\nIf the `--target` flag (or [`build.target`](https://doc.rust-lang.org/cargo/reference/config.html#buildtarget)) is used, then the flags will only be passed to the compiler for the target. Things being built for the host, such as build scripts or proc macros, will not receive the args. Without `--target`, the flags will be passed to all compiler invocations (including build scripts and proc macros) because dependencies are shared. If you have args that you do not want to pass to build scripts or proc macros and are building for the host, pass `--target` with the host triple.\n\nIt is not recommended to pass in flags that Cargo itself usually manages. For example, the flags driven by [profiles] are best handled by setting the appropriate profile setting.\n\n> **Caution**: Due to the low-level nature of passing flags directly to the compiler, this may cause a conflict with future versions of Cargo which may issue the same or similar flags on its own which may interfere with the flags you specify. This is an area where Cargo may not always be backwards compatible.",
                    "type": ["string", "array"],
                    "items": {
                        "type": "string"
                    }
                },
                "rustdocflags": {
                    "title": "Rustdoc flags",
                    "description": "Extra command-line flags to pass to `rustdoc`. The value may be a array of strings or a space-separated string.\n\nThere are two mutually exclusive sources of extra flags. They are checked in order, with the first one being used:\n\n1. `RUSTDOCFLAGS` environment variable.\n2. `build.rustdocflags` config value.\n\nAdditional flags may also be passed with the [`cargo rustdoc`](https://doc.rust-lang.org/cargo/commands/cargo-rustdoc.html) command.",
                    "type": ["string", "array"],
                    "items": {
                        "type": "string"
                    }
                },
                "incremental": {
                    "title": "Incremental compilation",
                    "description": "Whether or not to perform [incremental compilation](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental). The default if not set is to use the value from the [profile](https://doc.rust-lang.org/cargo/reference/profiles.html). Otherwise this overrides the setting of all profiles.\n\nThe `CARGO_INCREMENTAL` environment variable can be set to `1` to force enable incremental compilation for all profiles, or `0` to disable it. This env var overrides the config setting.",
                    "type": "boolean"
                },
                "dep-info-basedir": {
                    "description": "Strips the given path prefix from [dep info](https://doc.rust-lang.org/cargo/guide/build-cache.html#dep-info-files) file paths. This config setting is intended to convert absolute paths to relative paths for tools that require relative paths.\n\nThe setting itself is a config-relative path. So, for example, a value of `\".\"` would strip all paths starting with the parent directory of the `.cargo` directory.",
                    "type": "string"
                },
                "pipelining": {
                    "description": "This option is deprecated and unused. Cargo always has pipelining enabled.",
                    "type": "boolean",
                    "default": true,
                    "deprecated": true,
                    "x-taplo": {
                        "hidden": true
                    }
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#build"
                }
            }
        },
        "doc": {
            "title": "`cargo doc` options",
            "description": "The `[doc]` table defines options for the [`cargo doc`](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) command.",
            "type": "object",
            "properties": {
                "browser": {
                    "title": "Browser",
                    "description": "This option sets the browser to be used by [`cargo doc`](https://doc.rust-lang.org/cargo/commands/cargo-doc.html), overriding the `BROWSER` environment variable when opening documentation with the `--open` option.",
                    "type": ["string", "array"],
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#doc"
                }
            }
        },
        "cargo-new": {
            "title": "`cargo new` defaults",
            "description": "The `[cargo-new]` table defines defaults for the [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) command.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "This option is deprecated and unused.",
                    "type": "string",
                    "deprecated": true,
                    "x-taplo": {
                        "hidden": true
                    }
                },
                "email": {
                    "description": "This option is deprecated and unused.",
                    "type": "string",
                    "deprecated": true,
                    "x-taplo": {
                        "hidden": true
                    }
                },
                "vcs": {
                    "title": "Version control system",
                    "description": "Specifies the source control system to use for initializing a new repository. Valid values are `git`, `hg` (for Mercurial), `pijul`, `fossil` or `none` to disable this behavior. Defaults to `git`, or `none` if already inside a VCS repository. Can be overridden with the `--vcs` CLI option.",
                    "type": "string"
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#cargo-new"
                }
            }
        },
        "env": {
            "title": "Environment variables",
            "description": "The `[env]` section allows you to set additional environment variables for build scripts, rustc invocations, `cargo run` and `cargo build`.\n\n```toml\n[env]\nOPENSSL_DIR = \"/opt/openssl\"\n```\n\nBy default, the variables specified will not override values that already exist in the environment. This behavior can be changed by setting the `force` flag.\n\nSetting the `relative` flag evaluates the value as a config-relative path that is relative to the parent directory of the `.cargo` directory that contains the `config.toml` file. The value of the environment variable will be the full absolute path.\n\n```toml\n[env]\nTMPDIR = { value = \"/home/tmp\", force = true }\nOPENSSL_DIR = { value = \"vendor/openssl\", relative = true }\n```",
            "type": "object",
            "additionalProperties": {
                "type": "string"
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#env"
                }
            }
        },
        "future-incompat-report": {
            "title": "Incompatibility reporting",
            "description": "The `[future-incompat-report]` table controls setting for [future incompat reporting](https://doc.rust-lang.org/cargo/reference/future-incompat-report.html)",
            "type": "object",
            "properties": {
                "frequency": {
                    "title": "Report frequency",
                    "description": "Controls how often we display a notification to the terminal when a future incompat report is available. Possible values:\n\n* `always` (default): Always display a notification when a command (e.g. `cargo build`) produces a future incompat report\n* `never`: Never display a notification",
                    "type": "string",
                    "enum": ["always", "never"],
                    "default": "always"
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#future-incompat-report"
                }
            }
        },
        "http": {
            "title": "HTTP behaviour",
            "description": "The `[http]` table defines settings for HTTP behavior. This includes fetching crate dependencies and accessing remote git repositories.",
            "type": "object",
            "properties": {
                "debug": {
                    "title": "HTTP debugging",
                    "description": "If `true`, enables debugging of HTTP requests. The debug information can be seen by setting the `CARGO_LOG=cargo::ops::registry=debug` environment variable (or use `trace` for even more information).\n\nBe wary when posting logs from this output in a public location. The output may include headers with authentication tokens which you don't want to leak! Be sure to review logs before posting them.",
                    "type": "boolean",
                    "default": false
                },
                "proxy": {
                    "title": "HTTP proxy",
                    "description": "Sets an HTTP and HTTPS proxy to use. The format is in [libcurl format](https://ec.haxx.se/usingcurl-proxies.html) as in `[protocol://]host[:port]`. If not set, Cargo will also check the `http.proxy` setting in your global git configuration. If none of those are set, the `HTTPS_PROXY` or `https_proxy` environment variables set the proxy for HTTPS requests, and `http_proxy` sets it for HTTP requests.",
                    "type": "string"
                },
                "timeout": {
                    "title": "Request timeout",
                    "description": "Sets the timeout for each HTTP request, in seconds.",
                    "type": "integer",
                    "default": 30
                },
                "cainfo": {
                    "title": "Certificate Authority",
                    "description": "Path to a Certificate Authority (CA) bundle file, used to verify TLS certificates. If not specified, Cargo attempts to use the system certificates.",
                    "type": "string"
                },
                "check-revoke": {
                    "title": "Check certificate revocaction",
                    "description": "This determines whether or not TLS certificate revocation checks should be performed. This only works on Windows.",
                    "type": "boolean"
                },
                "ssl-version": {
                    "title": "TLS version",
                    "description": "This sets the minimum TLS version to use. It takes a string, with one of the possible values of \"default\", \"tlsv1\", \"tlsv1.0\", \"tlsv1.1\", \"tlsv1.2\", or \"tlsv1.3\".\n\nThis may alternatively take a table with two keys, `min` and `max`, which each take a string value of the same kind that specifies the minimum and maximum range of TLS versions to use.\n\nThe default is a minimum version of \"tlsv1.0\" and a max of the newest version supported on your platform, typically \"tlsv1.3\".",
                    "type": ["string", "object"],
                    "enum": [
                        "default",
                        "tlsv1",
                        "tlsv1.0",
                        "tlsv1.1",
                        "tlsv1.2",
                        "tlsv1.3"
                    ],
                    "properties": {
                        "min": {
                            "description": "Minimum TLS version",
                            "$ref": "#/definitions/tls-version"
                        },
                        "max": {
                            "description": "Maximum TLS version",
                            "$ref": "#/definitions/tls-version"
                        }
                    }
                },
                "low-speed-limit": {
                    "title": "Low speed limit",
                    "description": "This setting controls timeout behavior for slow connections. If the average transfer speed in bytes per second is below the given value for [`http.timeout`](https://doc.rust-lang.org/cargo/reference/config.html#httptimeout) seconds (default 30 seconds), then the connection is considered too slow and Cargo will abort and retry.",
                    "type": "integer",
                    "default": 10
                },
                "multiplexing": {
                    "title": "HTTP2 multiplexing",
                    "description": "When `true`, Cargo will attempt to use the HTTP2 protocol with multiplexing. This allows multiple requests to use the same connection, usually improving performance when fetching multiple files. If `false`, Cargo will use HTTP 1.1 without pipelining.",
                    "type": "boolean",
                    "default": true
                },
                "user-agent": {
                    "title": "User agent",
                    "description": "Specifies a custom user-agent header to use. The default if not specified is a string that includes Cargo's version.",
                    "type": "string"
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#http"
                }
            }
        },
        "install": {
            "title": "`cargo install` defaults",
            "description": "The `[install]` table defines defaults for the [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html) command.",
            "type": "object",
            "properties": {
                "root": {
                    "title": "Install directory",
                    "description": "Sets the path to the root directory for installing executables for [`cargo install`](https://doc.rust-lang.org/cargo/commands/cargo-install.html). Executables go into a `bin` directory underneath the root.\n\nTo track information of installed executables, some extra files, such as `.crates.toml` and `.crates2.json`, are also created under this root.\n\nThe default if not specified is Cargo's home directory (default `.cargo` in your home directory).\n\nCan be overridden with the `--root` command-line option.",
                    "type": "string"
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#install"
                }
            }
        },
        "net": {
            "title": "Network configuration",
            "description": "The `[net]` table controls networking configuration.",
            "type": "object",
            "properties": {
                "retry": {
                    "title": "Network retries",
                    "description": "Number of times to retry possibly spurious network errors.",
                    "type": "integer",
                    "default": 2
                },
                "git-fetch-with-cli": {
                    "title": "Use git executable",
                    "description": "If this is `true`, then Cargo will use the `git` executable to fetch registry indexes and git dependencies. If `false`, then it uses a built-in `git` library.\n\nSetting this to `true` can be helpful if you have special authentication requirements that Cargo does not support. See [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for more information about setting up git authentication.",
                    "type": "boolean",
                    "default": false
                },
                "offline": {
                    "title": "Do not access network",
                    "description": "If this is `true`, then Cargo will avoid accessing the network, and attempt to proceed with locally cached data. If `false`, Cargo will access the network as needed, and generate an error if it encounters a network error.\n\nCan be overridden with the `--offline` command-line option.",
                    "type": "boolean",
                    "default": false
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#net"
                }
            }
        },
        "patch": {
            "title": "Patch dependencies",
            "description": "Just as you can override dependencies using [`[patch]` in `Cargo.toml`](https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#the-patch-section), you can override them in the cargo configuration file to apply those patches to any affected build. The format is identical to the one used in `Cargo.toml`.\n\nSince `.cargo/config.toml` files are not usually checked into source control, you should prefer patching using `Cargo.toml` where possible to ensure that other developers can compile your crate in their own environments. Patching through cargo configuration files is generally only appropriate when the patch section is automatically generated by an external build tool.\n\nIf a given dependency is patched both in a cargo configuration file and a `Cargo.toml` file, the patch in the configuration file is used. If multiple configuration files patch the same dependency, standard cargo configuration merging is used, which prefers the value defined closest to the current directory, with `$HOME/.cargo/config.toml` taking the lowest precedence.\n\nRelative `path` dependencies in such a `[patch]` section are resolved relative to the configuration file they appear in.",
            "type": "object",
            "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                    "$ref": "#/definitions/dependency"
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#patch"
                }
            }
        }
    },
    "definitions": {
        "tls-version": {
            "type": "string",
            "enum": ["tlsv1", "tlsv1.0", "tlsv1.1", "tlsv1.2", "tlsv1.3"]
        },
        "semver-requirement": {
            "title": "Semantic Version requirement",
            "description": "The [version requirement](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html) of the target dependency.",
            "type": "string",
            "default": "*",
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html"
                }
            }
        },
        "dependency": {
            "title": "Dependency",
            "anyOf": [
                {
                    "$ref": "#/definitions/semver-requirement"
                },
                {
                    "$ref": "#/definitions/detailed-dependency"
                }
            ]
        },
        "detailed-dependency": {
            "title": "Detailed Dependency",
            "type": "object",
            "properties": {
                "branch": {
                    "title": "Git branch",
                    "description": "Specify the Git branch to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories).",
                    "type": "string",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories"
                        }
                    }
                },
                "default-features": {
                    "title": "Default features",
                    "description": "Use the default features of the dependency.",
                    "type": "boolean",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features"
                        }
                    }
                },
                "features": {
                    "title": "Features",
                    "description": "List of features to activate in the dependency.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features"
                        }
                    }
                },
                "git": {
                    "title": "Git repository",
                    "description": "To depend on a library located in a `git` repository, the minimum information\nyou need to specify is the location of the repository with the `git` key:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\" }\n```\n\nCargo will fetch the `git` repository at this location then look for a\n`Cargo.toml` for the requested crate anywhere inside the `git` repository\n(not necessarily at the root - for example, specifying a member crate name\nof a workspace and setting `git` to the repository containing the workspace).\n\nSince we haven’t specified any other information, Cargo assumes that\nwe intend to use the latest commit on the main branch to build our package.\nYou can combine the `git` key with the `rev`, `tag`, or `branch` keys to\nspecify something else. Here's an example of specifying that you want to use\nthe latest commit on a branch named `next`:\n\n```toml\n[dependencies]\nrand = { git = \"https://github.com/rust-lang-nursery/rand\", branch = \"next\" }\n```\n\nSee [Git Authentication](https://doc.rust-lang.org/cargo/appendix/git-authentication.html) for help with git authentication for private repos.\n\n> **Note**: [crates.io](https://crates.io/) does not allow packages to be published with `git`\n> dependencies (`git` [dev-dependencies](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#development-dependencies) are ignored). See the [Multiple\n> locations](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#multiple-locations) section for a fallback alternative.\n",
                    "type": "string",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories"
                        }
                    }
                },
                "optional": {
                    "title": "Optional dependency",
                    "description": "Mark the dependency as optional.\n\nOptional dependencies can be activated through features.",
                    "type": "boolean",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features"
                        }
                    }
                },
                "package": {
                    "title": "Package name",
                    "description": "Specify the name of the package.\n\nWhen writing a `[dependencies]` section in `Cargo.toml` the key you write for a\ndependency typically matches up to the name of the crate you import from in the\ncode. For some projects, though, you may wish to reference the crate with a\ndifferent name in the code regardless of how it's published on crates.io. For\nexample you may wish to:\n\n* Avoid the need to  `use foo as bar` in Rust source.\n* Depend on multiple versions of a crate.\n* Depend on crates with the same name from different registries.\n\nTo support this Cargo supports a `package` key in the `[dependencies]` section\nof which package should be depended on:\n\n```toml\n[package]\nname = \"mypackage\"\nversion = \"0.0.1\"\n\n[dependencies]\nfoo = \"0.1\"\nbar = { git = \"https://github.com/example/project\", package = \"foo\" }\nbaz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n```\n\nIn this example, three crates are now available in your Rust code:\n\n```rust\nextern crate foo; // crates.io\nextern crate bar; // git repository\nextern crate baz; // registry `custom`\n```\n\nAll three of these crates have the package name of `foo` in their own\n`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo that\nwe want the `foo` package even though we're calling it something else locally.\nThe `package` key, if not specified, defaults to the name of the dependency\nbeing requested.\n",
                    "type": "string",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#renaming-dependencies-in-cargotoml"
                        }
                    }
                },
                "path": {
                    "title": "Dependency path",
                    "description": "Cargo supports **path dependencies** which are typically sub-crates that live within one repository.\nLet's start off by making a new crate inside of our `hello_world` package:\n\n```console\n# inside of hello_world/\n$ cargo new hello_utils\n```\n\nThis will create a new folder `hello_utils` inside of which a `Cargo.toml` and\n`src` folder are ready to be configured. In order to tell Cargo about this, open\nup `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:\n\n```toml\n[dependencies]\nhello_utils = { path = \"hello_utils\" }\n```\n\nThis tells Cargo that we depend on a crate called `hello_utils` which is found\nin the `hello_utils` folder (relative to the `Cargo.toml` it’s written in).",
                    "type": "string",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-path-dependencies"
                        }
                    }
                },
                "registry": {
                    "title": "Registry",
                    "description": "To specify a dependency from a registry other than [crates.io](https://crates.io), first the\nregistry must be configured in a `.cargo/config.toml` file. See the [registries\ndocumentation](https://doc.rust-lang.org/cargo/reference/registries.html) for more information. In the dependency, set the `registry` key\nto the name of the registry to use.\n\n```toml\n[dependencies]\nsome-crate = { version = \"1.0\", registry = \"my-registry\" }\n```\n\n> **Note**: [crates.io](https://crates.io) does not allow packages to be published with\n> dependencies on other registries.\n",
                    "type": "string",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-other-registries"
                        }
                    }
                },
                "rev": {
                    "title": "Git revision",
                    "description": "Specify the Git revision to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories).",
                    "type": "string",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories"
                        }
                    }
                },
                "tag": {
                    "title": "Git tag",
                    "description": "Specify the Git tag to use in case of a [Git dependency](https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories).",
                    "type": "string",
                    "x-taplo": {
                        "links": {
                            "key": "https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#specifying-dependencies-from-git-repositories"
                        }
                    }
                },
                "version": {
                    "$ref": "#/definitions/semver-requirement"
                }
            },
            "x-taplo": {
                "initFields": ["version"]
            }
        }
    }
}
