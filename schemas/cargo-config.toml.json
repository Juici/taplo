{
    "$schema": "https://json-schema.org/draft-07/schema",
    "title": ".cargo/config.toml",
    "description": "A schema for Cargo configuration files",
    "x-taplo-info": {
        "patterns": ["^((.*(/|\\\\))?\\.cargo(/|\\\\)config(\\.toml)?)$"]
    },
    "type": "object",
    "properties": {
        "paths": {
            "title": "Path dependency overrides",
            "description": "An array of paths to local packages which are to be used as overrides for dependencies. For more information see the [Overriding Dependencies guide](https://doc.rust-lang.org/cargo/reference/overriding-dependencies.html#paths-overrides).",
            "type": "array",
            "items": {
                "type": "string"
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#paths"
                }
            }
        },
        "alias": {
            "title": "Command aliases",
            "description": "The `[alias]` table defines CLI command aliases. For example, running `cargo b` is an alias for running `cargo build`. Each key in the table is the subcommand, and the value is the actual command to run. The value may be an array of strings, where the first element is the command and the following are arguments. It may also be a string, which will be split on spaces into subcommand and arguments. The following aliases are built-in to Cargo:\n\n```toml\n[alias]\nb = \"build\"\nc = \"check\"\nd = \"doc\"\nt = \"test\"\nr = \"run\"\n```\nAliases are not allowed to redefine existing built-in commands.",
            "type": "object",
            "additionalProperties": {
                "type": ["string", "array"],
                "items": {
                    "type": "string"
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#alias"
                }
            }
        },
        "build": {
            "title": "Compiler settings",
            "description": "The `[build]` table controls build-time operations and compiler settings.",
            "type": "object",
            "properties": {
                "jobs": {
                    "title": "Number of parallel jobs",
                    "description": "Sets the maximum number of compiler processes to run in parallel.\n\nCan be overridden with the `--jobs` CLI option.",
                    "type": "integer"
                },
                "rustc": {
                    "title": "Compiler tool",
                    "description": "Sets the executable to use for `rustc`.",
                    "type": "string",
                    "default": "rustc"
                },
                "rustc-wrapper": {
                    "title": "Compiler wrapper",
                    "description": "Sets a wrapper to execute instead of `rustc`. The first argument passed to the wrapper is the path to the actual `rustc`.",
                    "type": "string"
                },
                "rustc-workspace-wrapper": {
                    "title": "Compiler workspace wrapper",
                    "description": "Sets a wrapper to execute instead of `rustc`, for workspace members only. The first argument passed to the wrapper is the path to the actual `rustc`. It affects the filename hash so that artifacts produced by the wrapper are cached separately.",
                    "type": "string"
                },
                "rustdoc": {
                    "title": "Doc generator",
                    "description": "Sets the executable to use for `rustdoc`.",
                    "type": "string",
                    "default": "rustdoc"
                },
                "target": {
                    "title": "Target platform",
                    "description": "The default target platform triple to compile to.\n\nThis may also be a relative path to a `.json` target spec file.\n\nCan be overridden with the `--target` CLI option.",
                    "type": "string"
                },
                "target-dir": {
                    "title": "Generated artifact path",
                    "description": "The path to where all compiler output is placed. The default if not specified is a directory named `target` located at the root of the workspace.\n\nCan be overridden with the `--target-dir` CLI option.",
                    "type": "string",
                    "default": "target"
                },
                "rustflags": {
                    "title": "Compiler flags",
                    "description": "Extra command-line flags to pass to `rustc`. The value may be a array of strings or a space-separated string.\n\nThere are three mutually exclusive sources of extra flags. They are checked in order, with the first one being used:\n\n1. `RUSTFLAGS` environment variable.\n2. All matching `target.<triple>.rustflags` and `target.<cfg>.rustflags` config entries joined together.\n3. `build.rustflags` config value.\n\nAdditional flags may also be passed with the [`cargo rustc`](https://doc.rust-lang.org/cargo/commands/cargo-rustc.html) command.\n\nIf the `--target` flag (or [`build.target`](https://doc.rust-lang.org/cargo/reference/config.html#buildtarget)) is used, then the flags will only be passed to the compiler for the target. Things being built for the host, such as build scripts or proc macros, will not receive the args. Without `--target`, the flags will be passed to all compiler invocations (including build scripts and proc macros) because dependencies are shared. If you have args that you do not want to pass to build scripts or proc macros and are building for the host, pass `--target` with the host triple.\n\nIt is not recommended to pass in flags that Cargo itself usually manages. For example, the flags driven by [profiles] are best handled by setting the appropriate profile setting.\n\n> **Caution**: Due to the low-level nature of passing flags directly to the compiler, this may cause a conflict with future versions of Cargo which may issue the same or similar flags on its own which may interfere with the flags you specify. This is an area where Cargo may not always be backwards compatible.",
                    "type": ["string", "array"],
                    "items": {
                        "type": "string"
                    }
                },
                "rustdocflags": {
                    "title": "Rustdoc flags",
                    "description": "Extra command-line flags to pass to `rustdoc`. The value may be a array of strings or a space-separated string.\n\nThere are two mutually exclusive sources of extra flags. They are checked in order, with the first one being used:\n\n1. `RUSTDOCFLAGS` environment variable.\n2. `build.rustdocflags` config value.\n\nAdditional flags may also be passed with the [`cargo rustdoc`](https://doc.rust-lang.org/cargo/commands/cargo-rustdoc.html) command.",
                    "type": ["string", "array"],
                    "items": {
                        "type": "string"
                    }
                },
                "incremental": {
                    "title": "Incremental compilation",
                    "description": "Whether or not to perform [incremental compilation](https://doc.rust-lang.org/cargo/reference/profiles.html#incremental). The default if not set is to use the value from the [profile](https://doc.rust-lang.org/cargo/reference/profiles.html). Otherwise this overrides the setting of all profiles.\n\nThe `CARGO_INCREMENTAL` environment variable can be set to `1` to force enable incremental compilation for all profiles, or `0` to disable it. This env var overrides the config setting.",
                    "type": "boolean"
                },
                "dep-info-basedir": {
                    "description": "Strips the given path prefix from [dep info](https://doc.rust-lang.org/cargo/guide/build-cache.html#dep-info-files) file paths. This config setting is intended to convert absolute paths to relative paths for tools that require relative paths.\n\nThe setting itself is a config-relative path. So, for example, a value of `\".\"` would strip all paths starting with the parent directory of the `.cargo` directory.",
                    "type": "string"
                },
                "pipelining": {
                    "description": "This option is deprecated and unused. Cargo always has pipelining enabled.",
                    "type": "boolean",
                    "default": true,
                    "deprecated": true,
                    "x-taplo": {
                        "hidden": true
                    }
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#build"
                }
            }
        },
        "doc": {
            "title": "`cargo doc` options",
            "description": "The `[doc]` table defines options for the [`cargo doc`](https://doc.rust-lang.org/cargo/commands/cargo-doc.html) command.",
            "type": "object",
            "properties": {
                "browser": {
                    "title": "Browser",
                    "description": "This option sets the browser to be used by [`cargo doc`](https://doc.rust-lang.org/cargo/commands/cargo-doc.html), overriding the `BROWSER` environment variable when opening documentation with the `--open` option.",
                    "type": ["string", "array"],
                    "items": {
                        "type": "string"
                    }
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#doc"
                }
            }
        },
        "cargo-new": {
            "title": "`cargo new` defaults",
            "description": "The `[cargo-new]` table defines defaults for the [`cargo new`](https://doc.rust-lang.org/cargo/commands/cargo-new.html) command.",
            "type": "object",
            "properties": {
                "name": {
                    "description": "This option is deprecated and unused.",
                    "type": "string",
                    "deprecated": true,
                    "x-taplo": {
                        "hidden": true
                    }
                },
                "email": {
                    "description": "This option is deprecated and unused.",
                    "type": "string",
                    "deprecated": true,
                    "x-taplo": {
                        "hidden": true
                    }
                },
                "vcs": {
                    "title": "Version control system",
                    "description": "Specifies the source control system to use for initializing a new repository. Valid values are `git`, `hg` (for Mercurial), `pijul`, `fossil` or `none` to disable this behavior. Defaults to `git`, or `none` if already inside a VCS repository. Can be overridden with the `--vcs` CLI option.",
                    "type": "string"
                }
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#cargo-new"
                }
            }
        },
        "env": {
            "title": "Environment variables",
            "description": "The `[env]` section allows you to set additional environment variables for build scripts, rustc invocations, `cargo run` and `cargo build`.\n\n```toml\n[env]\nOPENSSL_DIR = \"/opt/openssl\"\n```\n\nBy default, the variables specified will not override values that already exist in the environment. This behavior can be changed by setting the `force` flag.\n\nSetting the `relative` flag evaluates the value as a config-relative path that is relative to the parent directory of the `.cargo` directory that contains the `config.toml` file. The value of the environment variable will be the full absolute path.\n\n```toml\n[env]\nTMPDIR = { value = \"/home/tmp\", force = true }\nOPENSSL_DIR = { value = \"vendor/openssl\", relative = true }\n```",
            "type": "object",
            "additionalProperties": {
                "type": "string"
            },
            "x-taplo": {
                "links": {
                    "key": "https://doc.rust-lang.org/cargo/reference/config.html#env"
                }
            }
        }
    }
}
